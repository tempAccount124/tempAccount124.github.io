<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>My Awesome Site</title><description></description><link>https://tempAccount124.github.io</link><atom:link href="https://tempAccount124.github.io/feed.rss" rel="self" type="application/rss+xml" /><language>en</language><generator>Ignite v0.1.0</generator><image><url>https://tempAccount124.github.io/images/icon32.png</url><title>My Awesome Site</title><link>https://tempAccount124.github.io</link><width>32</width><height>32</height></image><item><guid isPermaLink="true">https://tempAccount124.github.io/path/to/enterprise-edition</guid><title>Apple announces Swift Enterprise Edition</title><link>https://tempAccount124.github.io/path/to/enterprise-edition</link><description><![CDATA[Although Swift gives us powerful programming technologies such as generics, protocols, and type inference, if there’s one thing we can all agree has been sorely lacking it’s built-in support for scalable concurrent transactions using RESTful middleware and messaging.]]></description><pubDate>수, 25 9월 2024 15:28:04 +0900</pubDate><dc:creator><![CDATA[Paul Hudson]]></dc:creator><category><![CDATA[April Fools]]></category><content:encoded><![CDATA[<p>Although Swift gives us powerful programming technologies such as generics, protocols, and type inference, if there’s one thing we can all agree has been sorely lacking it’s built-in support for scalable concurrent transactions using RESTful middleware and messaging.</p><p>Well, now that’s all set to change: today Apple announced a beta release of Swift Enterprise Edition, which finally delivers support for cutting-edge technologies like CORBA and UML, while also introducing a wholly new way of deploying apps that Apple has christened <em>Swift Beans</em>.</p><p>Swift Beans are 100% compatible with Xcode 10.2, meaning that you can immediately start brewing with Swift Enterprise Edition – and, more importantly, add it to your résumé.</p><p>Apple’s official announcement included some quotes from Ed Kermenek, the Swift project lead, giving some further details about how Swift Beans work: “Swift Beans are built on a much more advanced form of Bitcode, called the Apple Portable Runtime Intermediate Language. This lets us layer up abstractions in a way that has never been possible before – factories, builders, transaction services, and more.”</p><p>Several members of Apple’s Swift team have also been working hard on Swift Enterprise Edition, and responded to my questions on Twitter.</p><p>Jay Gorff, lead Swift Bean Brewer, said “Swift Beans are ready for widespread use: this technology give us the grounds to build firm foundations for today, but there’s also a latte you can do with it in the future – it has so many perks!”</p><p>Ben Corne, newly appointed maintainer of the Swift Bean Standard Library, added, “it’s been incredible how fast Swift Beans lets us solve real-world problems. Just yesterday I was able to write an all-new Swift Universal Command-line Kit written entirely in Swift Beans, and if it weren’t for the fact that its name spells ‘SUCK’ we’d be shipping it today.”</p><p>Steve Prestoff, head of public relations for Swift Enterprise Edition, had this to say: “I’m on a horse.”</p>]]></content:encoded></item><item><guid isPermaLink="true">https://tempAccount124.github.io/story/luna-and-arya-come-to-wwdc</guid><title>Luna and Arya come to WWDC</title><link>https://tempAccount124.github.io/story/luna-and-arya-come-to-wwdc</link><description><![CDATA[In the heart of Cupertino, amidst the buzz of WWDC, a caper of canine proportions was about to unfold, starring two unwitting heroines: Luna and Arya, the fluffy Samoyeds who are the real power behind Hacking with Swift. Little did anyone know, these two bundles of fur were about to turn Apple Park into their personal playground, all under the watchful eyes of tech enthusiasts and Apple executives alike.]]></description><pubDate>수, 25 9월 2024 15:28:04 +0900</pubDate><dc:creator><![CDATA[Paul Hudson]]></dc:creator><category><![CDATA[Swift]]></category><category><![CDATA[Story]]></category><content:encoded><![CDATA[<p>In the heart of Cupertino, amidst the buzz of <em>WWDC</em>, a caper of canine proportions was about to unfold, starring two unwitting heroines: <em>Luna</em> and <em>Arya</em>, the fluffy Samoyeds who are the real power behind Hacking with Swift. Little did anyone know, these two bundles of fur were about to turn Apple Park into their personal playground, all under the watchful eyes of tech enthusiasts and Apple executives alike.</p><p>The adventure began on a sunny Californian morning, as Paul (the dog’s owner / helper / treat provider), engrossed in his preparations for a Swift workshop, failed to notice Luna and Arya’s growing curiosity about his mysterious destination. Using their sleuth-like senses, the duo decided it was high time they discovered what was so captivating about Paul’s “work.”</p><p>Through a series of comedic mishaps, including a skateboard chase, a dive into a vat of spilled coffee beans, and an unintentional Lyft ride (courtesy of a kindly driver who couldn’t say no to those faces), Luna and Arya found themselves at the gates of Apple Park. With the agility of seasoned escape artists, they slipped through the security perimeter, their fluffy tails just a blur as they dashed into the heart of the action.</p><p>Inside, WWDC was in full swing. Developers from around the globe were immersed in code, oblivious to the furry storm headed their way. Luna and Arya, amazed by the sea of glowing Apple logos, embarked on a whirlwind tour of the premises, leaving a trail of chaos in their wake. From photobombing live interviews to inadvertently launching a demo of the latest visionOS, with a tail wag here and a bark there, they turned the meticulously planned event into an impromptu episode of <em>America’s Funniest Home Videos</em>.</p><p>As the pandemonium reached its peak, with developers tripping over charging cables and keynote speakers distracted by the sight of two Samoyeds chasing their own shadows on stage, a hero emerged from the shadows. Craig Federighi, Apple’s senior vice president of Software Engineering, known for his charismatic stage presence and luxurious mane of hair, stepped forward with a grin.</p><p>Craig, a dog lover himself, knew just what to do. Harnessing the power of Swift, he whipped out his MacBook and began coding on the fly. Within minutes, he had developed an app: “DogWhispererX,” using state-of-the-art machine learning algorithms to emit a frequency only Luna and Arya could hear, guiding them gently towards him.</p><p>But Craig didn’t stop there. Recognizing a golden opportunity, he turned the situation into the most memorable WWDC keynote ever. With Luna and Arya now calmly by his side, he introduced “Swift Paws,” a new framework for developing pet-friendly apps. The crowd went wild, their earlier frustrations forgotten, as they envisioned the possibilities of apps that could strengthen the bond between humans and their furry friends.</p><p>Luna and Arya, now the darlings of WWDC, were escorted back to a relieved and amused owner, who couldn’t believe his ears when he heard about their escapades. As a token of gratitude and to much laughter, Craig presented them with custom-made Apple Park Visitor badges, ensuring they’d always be remembered as the Samoyeds who added a touch of whimsy to the world of technology.</p><p>And so, WWDC continued, with developers now sharing not only their love for Swift but also stories of the day when two fluffy intruders reminded them of the joy and unpredictability that pets bring into our lives. Craig Federighi, with his quick thinking and Swift expertise, had saved the day, proving that sometimes, the best solutions come from embracing the unexpected.</p><p>In the end, Paul Hudson’s dogs didn’t just break into Apple Park; they broke into the hearts of everyone at WWDC, leaving a legacy that would be recounted with smiles and laughter for years to come. And as for Luna and Arya, they returned home, exhausted but exhilarated, dreaming of their next big adventure in the wonderful world of tech.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://tempAccount124.github.io/story/sam-swift-saves-the-day</guid><title>Sam Swift saves the day</title><link>https://tempAccount124.github.io/story/sam-swift-saves-the-day</link><description><![CDATA[Once upon a time in a land not so far away, nestled between the rolling hills of Silicon Valley, there was a developer named Sam Swift. Sam, as his name might suggest, was not just any developer; he was a Swift developer. A coder of high esteem, known across the land for his quick wit and even quicker compile times.]]></description><pubDate>수, 25 9월 2024 15:28:04 +0900</pubDate><dc:creator><![CDATA[Paul Hudson]]></dc:creator><category><![CDATA[Swift]]></category><category><![CDATA[Story]]></category><content:encoded><![CDATA[<p>Once upon a time in a land not so far away, nestled between the rolling hills of Silicon Valley, there was a developer named <strong>Sam Swift</strong>. Sam, as his name might suggest, was not just any developer; he was a <em>Swift</em> developer. A coder of high esteem, known across the land for his quick wit and even quicker compile times.</p><p>One fine day, as Sam was sipping his artisanal coffee and idly scrolling through his endless backlog of emails, he stumbled upon a message that would change the course of his day. The email was from BigTechCorp, a company so large it had its own weather system. They were in dire straits; their flagship app, <em>Flitter</em>, was down. Panic had set in, and only Sam’s expertise in Swift could save the day.</p><p>With the speed of a thousand asynchronous tasks, Sam leaped into action. He opened his MacBook with such force that the nearby barista spilled a latte in awe. As he began to assess the situation, he couldn’t help but chuckle at the absurdity of the bug that had brought <strong>Flitter</strong> to its knees: all because someone had named a variable <code>let itBe = "Beatles"</code> instead of <code>let apiKey = "SECRET"</code>.</p><p>Determined to not just fix the bug but to do so with style, Sam embarked on a coding spree that would be spoken of in hushed tones for generations to come. He donned his lucky programming socks, cracked his knuckles, and started typing at a speed that blurred the lines between reality and the digital realm.</p><p>First, he refactored the entire backend with a series of extensions that were so elegant, they made the Swift standard library look like a collection of beginner tutorials. He implemented a new feature, <code>func saveTheDay() -> Bool</code>, that not only fixed the bug but optimized the app’s performance by 300%. The function was a masterpiece, a symphony of code, complete with its own comedic comments:</p><pre><code class="language-swift">func saveTheDay() -> Bool {
    guard let apiKey = Server.fetch("API_KEY") else {
        print("Oops, we did it again. Britney wouldn't be proud.")
        return false
    }

    // If this code was any cleaner, it'd be in a detergent ad.
    performMagicWith(apiKey: apiKey)
    return true
}

// Perform the actual magic, and yes, it's as cool as it sounds.
func performMagicWith(apiKey: String) {
    // API calls go here, but they're too magical to show.
}
</code></pre><p>As Sam worked, the world outside seemed to stand still. Tech bloggers live-tweeted his progress, creating a global event that had everyone from New York to New Delhi on the edge of their seats. Memes were made, hashtags were trending, and somewhere in the midst of it all, Sam fixed Flitter.</p><p>With a final keystroke, he pushed the changes live. Instantly, Flitter sprang back to life, much to the relief of BigTechCorp and their billions of users who had been refreshing their feeds in a state of panic.</p><p>And so, our hero lived happily ever after, coding away into the sunset, leaving a trail of bug-free code and laughter in his wake. In the realm of Swift development, Sam Swift became a legend, a beacon of hope for all who face the dreaded specter of app-breaking bugs. His legacy was not just in the code he wrote but in the smiles he brought to faces around the world, proving once and for all that with the right blend of skills, humor, and a bit of Swift, any day could be saved.</p><p>The moral of the story? Always check your variables, keep your functions clean, and remember, in the world of software development, a little humor goes a long way. And if you ever find yourself in a bind, just ask yourself: What Would Sam Swift Do?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://tempAccount124.github.io/article/swift-against-humanity</guid><title>Now available to pre-order: Swift Against Humanity</title><link>https://tempAccount124.github.io/article/swift-against-humanity</link><description><![CDATA[So you think you know Swift? Think again! Fresh from the success of our audiobook launch, Laboratoires TwoStraws is back with an all-new card game that will finally give you something to do while waiting for Xcode to finish indexing.]]></description><pubDate>목, 07 3월 2024 00:30:00 +0900</pubDate><dc:creator><![CDATA[Paul Hudson]]></dc:creator><category><![CDATA[April Fools]]></category><category><![CDATA[Swift]]></category><content:encoded><![CDATA[<p>So you think you know Swift? Think again! Fresh from the success of our <a href="https://youtu.be/SHvBEwskO-k">audiobook launch</a>, Laboratoires TwoStraws is back with an all-new card game that will finally give you something to do while waiting for Xcode to finish indexing.</p><p>It’s called <strong>Swift Against Humanity</strong>, and the rules are both dazzlingly simple and also surprisingly similar to some other games you might have previously heard of: one player places a black card on the table that contains a question or part of a sentence, and all other players play one white card they think best completes it. The first player then shuffles the white cards, reads them out, then picks a winner – it’s literally <em>minutes</em> of fun.</p><p><img src="https://tempAccount124.github.io/images/sah1.jpg" alt="Black card: The secret to making your Swift code run fast is blank. White cards: Craig Federighi’s hair gel, some tasteful WWDC-themed cosplay, Paul Hudson’s dog army, two dozen force unwrapped optionals." class="img-fluid"></p><p>Pre-orders for Swift Against Humanity start tomorrow, with the first deliveries going out in the next week or so. Plus, we’re pleased to announce three incredible editions:</p><ul><li>Swift Against Humanity Standard Edition: for the language purists out there.</li><li>Swift Against Humanity Enterprise Edition: for all you folks busy building with <a href="https://www.hackingwithswift.com/articles/183/apple-announces-swift-enterprise-edition">Swift Enterprise Edition</a>.</li><li>Humanity Swift Concurrency Against Edition: for all developers who just love adding concurrency in places it really doesn’t belong.</li></ul><p><img src="https://tempAccount124.github.io/images/sah2.jpg" alt="Black card: What’s the most difficult thing about learning Swift? White cards: Always googling Swift and getting Taylor Swift results, converting a string to an array then back to a string then questioning your life choices, desperately trying to remember which button does what in Interface Builder, accidentally creating a black hole with Xcode’s Auto Layout constraints." class="img-fluid"></p><p>Swift Against Humanity was developed in conjunction with legendary game designer <a href="https://twitter.com/sofaracing">Daniel Leivers</a>, who had this to say: “Apple Store Genius Bar Fight Club! Clippy, but for Xcode! Fantasizing about the day Swift Evolution brings back Objective-C! I can literally write anything on these cards and people will buy them, we’re going to be so rich! Wait… are you recording this?”</p><p><img src="https://tempAccount124.github.io/images/sah3.jpg" alt="Black card: Apple’s newest Swift tutorial unexpectedly features a lesson on blank. White cards: Building an iMac with wheels, Tim Cook’s surprise rap career, trying to decipher closure syntax without crying, Core Data: when you need to store data, but also test your ability to withstand migraines." class="img-fluid"></p><p>We’ve been busy testing Swift Against Humanity for months now. Even Ed Kermenek, the Swift project lead, took a few hours out of his busy schedule to try it out, and had this to say: “Swift Against Humanity is neat and all, but the most important thing is that it doesn’t have any <a href="https://www.hackingwithswift.com/articles/248/swift-core-team-to-swift-bloggers-please-for-the-love-of-all-things-holy-find-a-different-color-than-orange">****ing orange</a>.”</p><p><img src="https://tempAccount124.github.io/images/sah4.jpg" alt="Black card: What new feature will Apple announce at this year’s WWDC? White cards: A sentient UIButton, the official Swift coding soundtrack, a support group for developers who are traumatized by Swift strings, doggo-driven development." class="img-fluid"></p><p>Now at this point I know what you’re thinking: surely a game this great must attract a premium price tag? Well, you’ll be pleased to know that all three editions of Swift Against Humanity are available for just <a href="https://www.hackingwithswift.com/articles/64/how-to-cut-swift-compile-times-by-half">5 SwiftCoin</a> plus tax and delivery.</p><p>Plus if you order now we’ll send you an exclusive <a href="https://www.hackingwithswift.com/articles/215/spot-the-swifty">Spot the Swifty</a> poster plus four limited edition bonus white cards:</p><ul><li>“When your app gets rejected for a feature that’s in 100 other apps.”</li><li>“Longing for the days of UIKit’s warm embrace.”</li><li>“Manually managing memory like it’s 2010.”</li><li>“Using integers to index into strings the way god intended.”</li></ul><p><img src="https://tempAccount124.github.io/images/sah5.jpg" alt="Black card: As any Swift developer knows, the hardest thing we face is blank. White cards: Playing pin the tail on the guideline violation with App Review, reenacting Groundhog Day with Xcode provisioning profiles, the moment when you realize that radar you filed might outlive you, that one coworker who won’t stop using AnyView" class="img-fluid"></p><p>So, the next time Xcode tells you to try breaking up an expression into distinct sub-expressions, try breaking out Swift Against Humanity instead!</p>]]></content:encoded></item></channel></rss>